@model medical_appointment_system.Models.User

@{
    ViewBag.Title = "Editar usuario";

    var isDoctor = Model.Roles != null && Model.Roles.Contains("medico");
    var isPatient = Model.Roles != null && Model.Roles.Contains("paciente");
}

<h4 class="text-center mb-3 text-body-emphasis">
    <i class="fa-solid fa-pen me-1"></i>
    Editar usuario
</h4>

@using (Html.BeginForm(null, null, FormMethod.Post, new { enctype = "multipart/form-data", id = "editUserForm" }))
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

    <p class="text-danger mb-3">
        * Obligatorio
    </p>

    @Html.HiddenFor(m => m.UserId)

    <div class="row mb-2">
        <div class="col-md-6 mb-2">
            @Html.Label("Código", htmlAttributes: new { @class = "form-label" })
            <input type="text" class="form-control" value="@Model.UserId" disabled />
        </div>

        <div class="col-md-6">
            @Html.LabelFor(m => m.FirstName, new { @class = "form-label" })
            <span class="text-danger">*</span>
            @Html.TextBoxFor(m => m.FirstName, new { @class = "form-control", placeholder = "Ingrese un(os) nombre(s)" })
            @Html.ValidationMessageFor(m => m.FirstName, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="row mb-2">
        <div class="col-md-6 mb-2">
            @Html.LabelFor(m => m.LastName, new { @class = "form-label" })
            <span class="text-danger">*</span>
            @Html.TextBoxFor(m => m.LastName, new { @class = "form-control", placeholder = "Ingrese un(os) apellido(s)" })
            @Html.ValidationMessageFor(m => m.LastName, "", new { @class = "text-danger" })
        </div>

        <div class="col-md-6">
            @Html.LabelFor(m => m.Email, new { @class = "form-label" })
            <span class="text-danger">*</span>
            @Html.TextBoxFor(m => m.Email, new { @class = "form-control", type = "email", placeholder = "correo@ejemplo.com" })
            @Html.ValidationMessageFor(m => m.Email, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="row mb-2">
        <div class="col-md-6 mb-2">
            @Html.LabelFor(m => m.Phone, new { @class = "form-label" })
            @Html.TextBoxFor(m => m.Phone, new
            {
                @class = "form-control",
                type = "number",
                placeholder = "Ingrese un número de teléfono",
                min = "0"
            })
            @Html.ValidationMessageFor(m => m.Phone, "", new { @class = "text-danger" })
        </div>

        <div class="col-md-6">
            @Html.LabelFor(m => m.Roles, new { @class = "form-label" })
            <span class="text-danger">*</span>
            @Html.DropDownListFor(m => m.SelectedRoleCombo, new SelectList(new[] {
                new { Value = "administrador", Text = "Administrador" },
                new { Value = "medico", Text = "Médico" },
                new { Value = "paciente", Text = "Paciente" },
                new { Value = "medico,paciente", Text = "Médico y Paciente" }
            }, "Value", "Text", Model.SelectedRoleCombo), "Seleccione una combinación de rol(es)", new { @class = "form-select" })
            @Html.ValidationMessageFor(m => m.SelectedRoleCombo, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="row mb-2">
        <div class="col-md-6 mb-2">
            @Html.LabelFor(m => m.ProfilePicture, new { @class = "form-label" })
            @Html.TextBoxFor(m => m.ProfilePicture, new { @type = "file", @class = "form-control" })
            @Html.ValidationMessageFor(m => m.ProfilePicture, "", new { @class = "text-danger" })
        </div>
    </div>

    @Html.HiddenFor(m => m.Password, new { @Value = "Mock1@pass" })

    <div id="medico-fields" class="row mb-2 @(isDoctor ? "" : "d-none")">
        <hr class="my-4" />
        <h4 class="text-body-emphasis text-center mb-4">
            <i class="fa-solid fa-user-doctor me-1"></i>
            Editar médico
        </h4>

        <div class="col-md-6 mb-2">
            @Html.Label("Especialidad", new { @class = "form-label" })
            <span class="text-danger">*</span>
            <select id="SpecialtyId" name="SpecialtyId" class="form-select">
                <option value="">Seleccione una especialidad</option>
            </select>
            <span class="text-danger field-validation-error d-block" id="SpecialtyId-error"></span>
        </div>
        <div class="col-md-6">
            @Html.Label("Estado", new { @class = "form-label" })
            <span class="text-danger">*</span>
            @Html.DropDownListFor(m => m.Status, new SelectList(new[] {
                new SelectListItem { Value = "true", Text = "Activo" },
                new SelectListItem { Value = "false", Text = "Inactivo" }
            }, "Value", "Text", Model.Status?.ToString().ToLower()), new { @class = "form-select" })
            <span class="text-danger field-validation-error d-block" id="Status-error"></span>
        </div>
    </div>

    <div id="paciente-fields" class="row mb-2 @(isPatient ? "" : "d-none")">
        <hr class="my-4" />
        <h4 class="text-body-emphasis text-center mb-4">
            <i class="fa-solid fa-bed-pulse me-1"></i>
            Editar paciente
        </h4>

        <div class="col-md-6 mb-2">
            @Html.Label("Fecha de nacimiento", new { @class = "form-label" })
            <span class="text-danger">*</span>
            @Html.TextBox("BirthDate", Model.BirthDate?.ToString("yyyy-MM-dd"), new { @type = "date", @class = "form-control" })
            <span class="text-danger field-validation-error d-block" id="BirthDate-error"></span>
        </div>
        <div class="col-md-6">
            @Html.Label("Grupo sanguíneo", new { @class = "form-label" })
            @Html.DropDownList("BloodType", new SelectList(new[] {
                "A+", "A-", "B+", "B-", "AB+", "AB-", "O+", "O-"
            }, Model.BloodType), "Seleccione un grupo sanguíneo", new { @class = "form-select" })
        </div>
    </div>

    <div class="d-flex justify-content-end gap-2 mt-3">
        <a href="@Url.Action("Index")" class="btn btn-secondary">
            <i class="fa-solid fa-left-long me-1"></i>
            Volver
        </a>

        <button type="submit" class="btn btn-primary">
            <i class="fa-solid fa-floppy-disk me-1"></i>
            Guardar
        </button>
    </div>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script src="~/Scripts/password.js"></script>

    <script>
        function toggleRoleFields() {
            const selected = $('#SelectedRoleCombo').val();

            const isMedico = selected.includes('medico');
            const isPaciente = selected.includes('paciente');

            $('#medico-fields').toggleClass('d-none', !isMedico);
            $('#paciente-fields').toggleClass('d-none', !isPaciente);

            if (isMedico) {
                const $specialty = $('#SpecialtyId');
                $specialty.prop('disabled', false);

                $.getJSON('@Url.Action("GetSpecialties", "Users")', function (data) {
                    $specialty.empty().append($('<option>').val('').text('Seleccione una especialidad'));

                    $.each(data, function (i, item) {
                        const isSelected = item.SpecialtyId == '@Model.SpecialtyId';
                        $specialty.append(
                            $('<option>').val(item.SpecialtyId).text(item.Name).prop('selected', isSelected)
                        );
                    });
                });
            }
        }

        function validateDynamicFields() {
            const selectedRoles = $('#SelectedRoleCombo').val();
            const isMedico = selectedRoles.includes('medico');
            const isPaciente = selectedRoles.includes('paciente');

            let valid = true;

            $('#SpecialtyId-error, #Status-error, #BirthDate-error').text('');
            $('#SpecialtyId, #Status, #BirthDate').removeClass('is-invalid');

            if (isMedico) {
                const specialtyId = $('#SpecialtyId').val();
                const status = $('#Status').val();

                if (!specialtyId) {
                    $('#SpecialtyId-error').text('Seleccione una especialidad.');
                    $('#SpecialtyId').addClass('is-invalid');
                    valid = false;
                }

                if (!status) {
                    $('#Status-error').text('Seleccione un estado.');
                    $('#Status').addClass('is-invalid');
                    valid = false;
                }
            }

            if (isPaciente) {
                const birthDate = $('#BirthDate').val();

                if (!birthDate) {
                    $('#BirthDate-error').text('Ingrese una fecha de nacimiento.');
                    $('#BirthDate').addClass('is-invalid');
                    valid = false;
                }
            }

            return valid;
        }

        $(document).ready(function () {
            toggleRoleFields();

            $('#SelectedRoleCombo').on('change', toggleRoleFields);

            $('#editUserForm').on('submit', function (e) {
                if (!validateDynamicFields()) {
                    e.preventDefault();
                }
            });

            $('#SpecialtyId, #Status, #BirthDate').on('input change', function () {
                const fieldId = $(this).attr('id');
                $(`#${fieldId}-error`).text('');
                $(this).removeClass('is-invalid');
            });
        });
    </script>
}
